
// server <=> client
// The First Message client send to server
message TimeSync {
    required int64 client = 1;  // UTC timestamp in milliseconds
    required int64 server = 2;
}


message Vector2 {
    required float x = 1;
    required float y = 2;
}

// A circle on the screen.
// One Player can have many Units (split)
message Unit {
    enum UnitStatus {
        Idle = 1;
        Move = 2;
        Jump = 3;
    }

    required string id = 1;
    required Vector2 pos = 2;
    required Vector2 towards = 3;
    required UnitStatus status = 4;
    required float score = 5;

    optional string name = 6;
    optional int32 color = 7;

    required int64 update_at = 8;   // server based
}


// client <=> server
// **NOTE** UnitAdd are broadcast to all clients immediately
// No need waiting for server tick
message UnitAdd {
    repeated Unit units = 1;
}

// client => server
message UnitRemove {
    repeated string ids = 1;
}


// client => server
message UnitUpdate {
    repeated Unit units = 2;
}


message Dot {
    required string id = 1;
    required Vector2 pos = 2;
    required int32 color = 3;
}

// server => client
message DotAdd {
    repeated Dot dots = 1;
}


// client => server
message DotRemove {
    repeated string ids = 1;
}

// server => client
// when a new connection made
message SceneInit {
    required UnitAdd unit_adds = 1;
    required DotAdd dot_adds = 2;
}

// server => client
// server tick
message SceneSync {
    required UnitUpdate unit_updates = 1;
    optional UnitRemove unit_removes = 2;
    optional DotAdd dot_adds = 3;
    optional DotRemove dot_removes = 4;
}


// Communication
// 1. client join server.
// 2. client send TimeSync to sync time, and server send TimeSync back.
// 3. server make this client join room, and send SceneInit to client.
// 4. client got name, and send UnitAdd to server.
// 5. server broadcast this message immediately.
// 7. client send UnitUpdate/UnitRemove/DotRemove to server
// 8. server send SceneSync in next server tick

